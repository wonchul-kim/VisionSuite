import warnings

import cv2
import numpy as np
import shapely.speedups
from shapely.geometry import (
    GeometryCollection,
    LineString,
    MultiLineString,
    MultiPoint,
    MultiPolygon,
    Point,
    Polygon,
    mapping,
)
from shapely.ops import polygonize, unary_union

from visionsuite.engines.data.slicer.utils.helpers import plot_poinsts_list  # , plot_polygons


def handle_self_intersection(points):
    new_points = []
    for _points in points:
        # line = LineString(
        #     [[x, y] for x, y in _points["points"] + [_points["points"][0]]]
        # )
        line = LineString(_points["points"] + [_points["points"][0]])

        polygons = list(polygonize(unary_union(line)))

        if not line.is_simple or len(polygons) > 1:
            print("The line is forming polygons by intersecting itself")
            for polygon in polygons:
                polygon = [list(item) for item in mapping(polygon)["coordinates"][0]]
                new_points.append(
                    {
                        "points": polygon[:-1],
                        "label": _points["label"],
                        "shape_type": _points["shape_type"],
                    }
                )
        else:
            new_points.append(_points)

    return new_points


def reorder_points(points_list):
    # Find the point with the lowest y-coordinate (or highest if multiple points have the same lowest y-coordinate)
    lowest_point = min(points_list, key=lambda p: (p[1], -p[0]))

    # Sort the remaining points based on their polar angle relative to the lowest point
    sorted_points = sorted(
        points_list,
        key=lambda p: (np.arctan2(p[1] - lowest_point[1], p[0] - lowest_point[0]), p),
    )

    # Add the lowest point as the first and last point to create a closed polygon
    sorted_points.append(sorted_points[0])

    return sorted_points


def close_roi(roi):
    return [
        (roi[0], roi[1]),
        (roi[2], roi[1]),
        (roi[2], roi[3]),
        (roi[0], roi[3]),
        (roi[0], roi[1]),
    ]


def polygon_to_points_list(polygons, close_loop=False):
    points_list = []
    for polygon in polygons:
        assert isinstance(polygon, shapely.geometry.polygon.Polygon), RuntimeError(
            f"The polygons should have type of shapely.geometry.polygon.Polygon, not {type(polygon)}"
        )
        point_list = []
        if polygon.geom_type == "Polygon":
            xs, ys = polygon.exterior.xy
            for idx, (x, y) in enumerate(zip(xs, ys)):
                if idx == len(xs) - 1:
                    if close_loop:
                        point_list.append([int(x), int(y)])
                else:
                    point_list.append([int(x), int(y)])

            points_list.append(point_list)

        elif polygon.geom_type == "MultiPolygon":
            for _polygon in polygon:
                point_list = []
                xs, ys = _polygon.exterior.xy
                for idx, (x, y) in enumerate(zip(xs, ys)):
                    if idx == len(xs) - 1:
                        if close_loop:
                            point_list.append([int(x), int(y)])
                    else:
                        point_list.append([int(x), int(y)])

                points_list.append(point_list)

        else:
            raise NotImplementedError(f"Sorry, another geom type of {polygon.geom_type} is not implemented yet.")

    return points_list


def is_polygon_valid(polygon):
    return polygon.is_valid


def val_polygon(polygon_points):
    # Check if the polygon is valid, and if not, attempt to correct it
    polygon = Polygon(polygon_points)
    if not polygon.is_valid:
        print(">>> warning for invalid")
        polygon = polygon.buffer(0)  # Attempt to fix self-intersections
    return polygon


def make_points_closed_polygon(points_list):
    points_list.append(points_list[-1])
    polygon = Polygon(np.array(points_list))

    return polygon


def make_points_list_to_int(points_list):
    _points_list = []
    for points in points_list:
        tmp = []
        for point in points:
            tmp.append(int(point))
        _points_list.append(tmp)
    points_list = _points_list

    return points_list


def get_intersected_points(
    points_list_1,
    points_list_2,
    is_points1_roi=False,
    output_list=True,
    get_area=False,
    filename=None,
):
    if shapely.speedups.available:
        shapely.speedups.enable()

    if len(points_list_1) == 4 and is_points1_roi:
        closed_points_list_1 = close_roi(points_list_1)

    polygon1 = Polygon(np.array(closed_points_list_1))
    polygon2 = make_points_closed_polygon(points_list_2)

    with np.errstate(invalid="ignore"):
        try:
            intersection_np = polygon1.intersection(polygon2)
        except Exception as e:
            print(
                f"NEED to check annotations of points1 ({points_list_1}) and points2 ({points_list_2}) for {filename}: {e}"
            )
            print(f"Trying to make the points as int and then find intersection again ...!")

            try:
                polygon1 = Polygon(np.array(make_points_list_to_int(points_list_1)))
                polygon2 = make_points_closed_polygon(make_points_list_to_int(points_list_2))

                intersection_np = polygon1.intersection(polygon2)
            except Exception as error:
                try:
                    print(error)
                    mask = np.zeros(
                        (
                            points_list_1[3] - points_list_1[1],
                            points_list_1[2] - points_list_1[0],
                        )
                    )
                    assert len(points_list_2) != 0, ValueError(
                        f"length of points_list_2 cannot be 0, not it is {len(points_list_2)}"
                    )

                    _points_list_2 = []
                    for points_2 in points_list_2:
                        _points_list_2.append(
                            [
                                points_2[0] - points_list_1[0],
                                points_2[1] - points_list_1[1],
                            ]
                        )
                    arr = np.array(_points_list_2, dtype=np.int32)
                    cv2.fillPoly(mask, [arr], color=(1))
                    new_mask = (mask == 1).astype(np.uint8)
                    contours, _ = cv2.findContours(new_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
                    for contour in contours:
                        if len(contour) < 10:
                            pass
                        else:
                            epsilon = 0.001 * cv2.arcLength(contour, True)
                            approx = cv2.approxPolyDP(contour, epsilon, True)
                            for objects in [approx]:
                                polygon = []
                                # xs, ys = [], []
                                for jdx in range(0, len(objects)):
                                    polygon.append(
                                        [
                                            int(objects[jdx][0][0] + points_list_1[0]),
                                            int(objects[jdx][0][1] + points_list_1[1]),
                                        ]
                                    )
                                    # xs.append(int(objects[jdx][0][0] + points_list_1[0]))
                                    # ys.append(int(objects[jdx][0][1] + points_list_1[1]))

                                # bbox = [int(np.max(xs)), int(np.max(ys)), int(np.min(xs)), int(np.min(ys))]

                    intersection_np = Polygon(np.array(polygon))
                except Exception as error:
                    print(error)
                    raise RuntimeError(f"There has been error when finding intersection for {filename}: {e}")

    area = intersection_np.area
    if intersection_np.is_empty:
        if not get_area:
            return []
        else:
            return [], 0

    if isinstance(intersection_np, Polygon):
        contour_polygons = [intersection_np]
    elif isinstance(intersection_np, MultiPolygon):
        contour_polygons = list(intersection_np.geoms)
    elif (
        isinstance(intersection_np, Point)
        or isinstance(intersection_np, MultiPoint)
        or isinstance(intersection_np, LineString)
        or isinstance(intersection_np, MultiLineString)
    ):
        if not get_area:
            return []
        else:
            return [], 0
    elif isinstance(intersection_np, GeometryCollection):
        contour_polygons = []
        for geometry in intersection_np.geoms:
            if isinstance(geometry, Polygon):
                contour_polygons.append(geometry)

        if not contour_polygons:
            warnings.warn(f"No valid polygons found in the GeometryCollection: {intersection_np} at {filename}")
    else:
        raise NotImplementedError(f"Sorry, {type(intersection_np)} type of geometry is not implemented yet")

    if output_list:
        contour_polygons = polygon_to_points_list(contour_polygons)

    if not get_area:
        return contour_polygons
    else:
        return contour_polygons, area

    # # Convert the result to bounding boxes
    # bounding_boxes = []
    # if isinstance(intersection_np, Polygon):
    #     bounding_boxes.append(intersection_np.bounds)
    # elif isinstance(intersection_np, MultiPolygon):
    #     for polygon in list(intersection_np.geoms):
    #         bounding_boxes.append(polygon.bounds)

    # return bounding_boxes


if __name__ == "__main__":
    # roi = [10, 10, 8890, 12480]
    # points = [[
    #       4211.0,
    #       2390.0
    #     ],
    #     [
    #       4165.0,
    #       2414.0
    #     ],
    #     [
    #       4132.0,
    #       2441.0
    #     ],
    #     [
    #       4095.0,
    #       2481.0
    #     ],
    #     [
    #       4082.0,
    #       2496.0
    #     ],
    #     [
    #       4107.0,
    #       2536.0
    #     ],
    #     [
    #       4107.0,
    #       2536.0
    #     ],
    #     [
    #       4162.0,
    #       2514.0
    #     ],
    #     [
    #       4185.0,
    #       2530.0
    #     ],
    #     [
    #       4184.0,
    #       2550.0
    #     ],
    #     [
    #       4212.0,
    #       2545.0
    #     ],
    #     [
    #       4208.0,
    #       2604.0
    #     ],
    #     [
    #       4232.0,
    #       2649.0
    #     ],
    #     [
    #       4229.0,
    #       2674.0
    #     ],
    #     [
    #       4153.0,
    #       2685.0
    #     ],
    #     [
    #       4131.0,
    #       2694.0
    #     ],
    #     [
    #       4073.0,
    #       2777.0
    #     ],
    #     [
    #       4039.0,
    #       2783.0
    #     ],
    #     [
    #       4005.0,
    #       2811.0
    #     ],
    #     [
    #       4014.0,
    #       2857.0
    #     ],
    #     [
    #       4069.0,
    #       2833.0
    #     ],
    #     [
    #       4492.0,
    #       2717.0
    #     ],
    #     [
    #       4776.0,
    #       2694.0
    #     ],
    #     [
    #       5011.0,
    #       2712.0
    #     ],
    #     [
    #       5093.0,
    #       2722.0
    #     ],
    #     [
    #       5133.0,
    #       2685.0
    #     ],
    #     [
    #       5142.0,
    #       2649.0
    #     ],
    #     [
    #       5118.0,
    #       2609.0
    #     ],
    #     [
    #       5088.0,
    #       2604.0
    #     ],
    #     [
    #       5065.0,
    #       2623.0
    #     ],
    #     [
    #       5040.0,
    #       2637.0
    #     ],
    #     [
    #       5001.0,
    #       2636.0
    #     ],
    #     [
    #       4976.0,
    #       2634.0
    #     ],
    #     [
    #       4955.0,
    #       2614.0
    #     ],
    #     [
    #       4938.0,
    #       2591.0
    #     ],
    #     [
    #       4950.0,
    #       2566.0
    #     ],
    #     [
    #       4985.0,
    #       2542.0
    #     ],
    #     [
    #       5012.0,
    #       2528.0
    #     ],
    #     [
    #       5033.0,
    #       2539.0
    #     ],
    #     [
    #       5012.0,
    #       2555.0
    #     ],
    #     [
    #       4972.0,
    #       2575.0
    #     ],
    #     [
    #       4958.0,
    #       2596.0
    #     ],
    #     [
    #       4985.0,
    #       2606.0
    #     ],
    #     [
    #       5027.0,
    #       2582.0
    #     ],
    #     [
    #       5050.0,
    #       2564.0
    #     ],
    #     [
    #       5060.0,
    #       2541.0
    #     ],
    #     [
    #       5103.0,
    #       2548.0
    #     ],
    #     [
    #       5123.0,
    #       2534.0
    #     ],
    #     [
    #       5143.0,
    #       2540.0
    #     ],
    #     [
    #       5142.0,
    #       2508.0
    #     ],
    #     [
    #       5165.0,
    #       2492.0
    #     ],
    #     [
    #       5177.0,
    #       2521.0
    #     ],
    #     [
    #       5166.0,
    #       2554.0
    #     ],
    #     [
    #       5186.0,
    #       2570.0
    #     ],
    #     [
    #       5217.0,
    #       2564.0
    #     ],
    #     [
    #       5253.0,
    #       2552.0
    #     ],
    #     [
    #       5278.0,
    #       2560.0
    #     ],
    #     [
    #       5283.0,
    #       2584.0
    #     ],
    #     [
    #       5271.0,
    #       2615.0
    #     ],
    #     [
    #       5248.0,
    #       2625.0
    #     ],
    #     [
    #       5233.0,
    #       2636.0
    #     ],
    #     [
    #       5240.0,
    #       2655.0
    #     ],
    #     [
    #       5257.0,
    #       2656.0
    #     ],
    #     [
    #       5274.0,
    #       2674.0
    #     ],
    #     [
    #       5260.0,
    #       2688.0
    #     ],
    #     [
    #       5242.0,
    #       2686.0
    #     ],
    #     [
    #       5221.0,
    #       2689.0
    #     ],
    #     [
    #       5209.0,
    #       2710.0
    #     ],
    #     [
    #       5166.0,
    #       2737.0
    #     ],
    #     [
    #       5349.0,
    #       2797.0
    #     ],
    #     [
    #       5574.0,
    #       2883.0
    #     ],
    #     [
    #       5804.0,
    #       3012.0
    #     ],
    #     [
    #       5842.0,
    #       3031.0
    #     ],
    #     [
    #       5826.0,
    #       2985.0
    #     ],
    #     [
    #       5811.0,
    #       2963.0
    #     ],
    #     [
    #       5810.0,
    #       2921.0
    #     ],
    #     [
    #       5842.0,
    #       2914.0
    #     ],
    #     [
    #       5868.0,
    #       2907.0
    #     ],
    #     [
    #       5894.0,
    #       2842.0
    #     ],
    #     [
    #       5907.0,
    #       2800.0
    #     ],
    #     [
    #       5897.0,
    #       2765.0
    #     ],
    #     [
    #       5851.0,
    #       2732.0
    #     ],
    #     [
    #       5789.0,
    #       2697.0
    #     ],
    #     [
    #       5723.0,
    #       2657.0
    #     ],
    #     [
    #       5665.0,
    #       2635.0
    #     ],
    #     [
    #       5627.0,
    #       2641.0
    #     ],
    #     [
    #       5604.0,
    #       2642.0
    #     ],
    #     [
    #       5577.0,
    #       2612.0
    #     ],
    #     [
    #       5554.0,
    #       2595.0
    #     ],
    #     [
    #       5543.0,
    #       2574.0
    #     ],
    #     [
    #       5510.0,
    #       2585.0
    #     ],
    #     [
    #       5490.0,
    #       2558.0
    #     ],
    #     [
    #       5466.0,
    #       2541.0
    #     ],
    #     [
    #       5425.0,
    #       2531.0
    #     ],
    #     [
    #       5388.0,
    #       2532.0
    #     ],
    #     [
    #       5358.0,
    #       2508.0
    #     ],
    #     [
    #       5366.0,
    #       2468.0
    #     ],
    #     [
    #       5326.0,
    #       2424.0
    #     ],
    #     [
    #       5266.0,
    #       2381.0
    #     ],
    #     [
    #       5221.0,
    #       2370.0
    #     ],
    #     [
    #       5181.0,
    #       2381.0
    #     ],
    #     [
    #       5106.0,
    #       2388.0
    #     ],
    #     [
    #       5075.0,
    #       2408.0
    #     ],
    #     [
    #       5042.0,
    #       2415.0
    #     ],
    #     [
    #       4991.0,
    #       2415.0
    #     ],
    #     [
    #       4684.0,
    #       2423.0
    #     ],
    #     [
    #       4407.0,
    #       2434.0
    #     ],
    #     [
    #       4334.0,
    #       2439.0
    #     ],
    #     [
    #       4263.0,
    #       2409.0
    #     ]
    #   ]

    # print(len(points))
    # contour_polygons = get_intersected_points(roi, points, False)
    # print(contour_polygons)

    # plot_poinsts_list(contour_polygons + [reorder_points(close_roi(roi))] + [reorder_points(points)])
    # plot_poinsts_list(contour_polygons + [reorder_points(close_roi(roi))])

    points1 = [(2045, 0), (2557, 0), (2557, 512), (2045, 512), (2045, 0)]
    points2 = [
        [2133.6398642276667, 242.6157638468718],
        [2149.3301683835966, 250.76265254321996],
        [2166.8308922498263, 246.236603267471],
        [2173.770834472641, 245.63313003070448],
        [2181.0125133138395, 250.15917930645344],
        [2181.0125133138395, 250.15917930645344],
        [2184.331616116055, 250.15917930645344],
        [2188.8576653918044, 262.228644041784],
        [2195.495870996236, 267.3581665542995],
        [2200.3236568903685, 273.3928989219648],
        [2202.134076600668, 267.3581665542995],
        [2195.1941343778526, 259.8147510947179],
        [2191.875031575637, 247.1418131226208],
        [2185.2368259712052, 235.67582162405677],
        [2200.021920271985, 236.27929486082328],
        [2205.453179402884, 234.77061176890697],
        [2205.754916021267, 241.71055399172204],
        [2204.2462329293508, 245.02965679393793],
        [2209.979228678633, 240.80534413657224],
        [2211.186175152166, 234.16713853214043],
        [2216.6174342830645, 235.07234838729022],
        [2216.6174342830645, 235.07234838729022],
        [2221.1434835588134, 232.96019205860736],
        [2228.0834257816286, 236.27929486082328],
        [2234.419894767677, 236.27929486082328],
        [2230.1955821103115, 242.01229061010534],
        [2237.738997569893, 240.20187089980573],
        [2237.738997569893, 240.20187089980573],
        [2243.471993319175, 236.58103147920656],
        [2248.903252450074, 242.61576384687183],
        [2248.903252450074, 242.61576384687183],
        [2256.7484045280385, 244.12444693878814],
        [2250.7136721603733, 236.58103147920656],
        [2265.498766461153, 238.9949244262727],
        [2273.343918539118, 238.08971457112287],
        [2282.8933386568006, 242.5472091347419],
        [2293.8161176844033, 245.0202911787274],
        [2301.0292736460274, 247.69946339304502],
        [2306.1815279043303, 246.6690125413844],
        [2305.769347563666, 240.48630743142067],
        [2310.303331310973, 246.6690125413844],
        [2317.310397102265, 246.4629223710523],
        [2324.935733404554, 248.72991424470564],
        [2332.9732500475066, 248.52382407437352],
        [2332.9732500475066, 245.8446518600559],
        [2323.905282552893, 245.0202911787274],
        [2319.5773889759184, 239.86803692042432],
        [2317.5164872725973, 233.2731514697963],
        [2312.1581428439617, 232.24270061813567],
        [2319.7834791462506, 228.73916772248955],
        [2320.607839827579, 233.47924164012844],
        [2331.1184385145175, 230.8000694258108],
        [2335.858512432156, 234.71578266212114],
        [2349.048283333412, 234.3036023214569],
        [2354.61271793238, 241.72284845341343],
        [2368.6268495149643, 247.28728305238076],
        [2372.1303824106103, 250.996906118359],
        [2376.2521858172527, 250.17254543703052],
        [2375.427825135924, 247.08119288204864],
        [2371.306021729282, 246.6690125413844],
        [2368.832939685296, 243.9898403270668],
        [2363.0624149159967, 242.3411189644098],
        [2357.7040704873616, 238.42540572809943],
        [2357.0857999763653, 234.92187283245332],
        [2364.7111362786536, 234.92187283245332],
        [2364.7111362786536, 234.92187283245332],
        [2368.6268495149643, 237.80713521710302],
        [2370.069480707289, 235.7462335137818],
        [2371.718202069946, 236.98277453577455],
        [2372.1303824106103, 240.48630743142067],
        [2374.1912841139315, 237.6010450467709],
        [2378.93135803157, 237.6010450467709],
        [2379.755718712899, 240.07412709075643],
        [2378.5504554564704, 244.45895105853037],
        [2381.391179001681, 243.71139223084364],
        [2381.3911790016814, 243.71139223084364],
        [2383.4843437192044, 239.97359809240965],
        [2383.9328790158165, 243.71139223084364],
        [2381.690202532756, 247.74820990035232],
        [2385.42799667119, 245.50553341729196],
        [2385.7270202022646, 249.69186285233798],
        [2390.9599319960726, 249.09381579018853],
        [2394.5482143689687, 251.0374687421742],
        [2397.2394261486415, 253.87819228738405],
        [2397.2394261486415, 253.87819228738405],
        [2399.781126162776, 247.15016283820287],
        [2405.014037956584, 245.20650988621722],
        [2409.3498791571674, 248.1967451969644],
        [2414.1342556543627, 247.59869813481495],
        [2417.872049792797, 250.43942168002482],
        [2419.3671674481707, 247.59869813481495],
        [2424.8991027730526, 248.4957687280391],
        [2424.8991027730526, 245.20650988621722],
        [2429.533967504711, 246.55211577605343],
        [2434.7668792985187, 248.9443040246512],
        [2442.990026403073, 250.28990991448742],
        [2446.889676446052, 251.37771098074435],
        [2445.2827733448285, 256.06451169264795],
        [2447.827036588433, 262.0903983222383],
        [2453.4511974427173, 258.07314056917807],
        [2456.7989122369345, 252.44897971489377],
        [2458.941449705233, 247.89608759475882],
        [2457.6023637875464, 246.69091026884075],
        [2452.2460201167996, 246.55700167707207],
        [2453.986831809792, 244.01273843346723],
        [2449.7017568731944, 240.79893223101905],
        [2457.8701809710838, 240.26329786394436],
        [2460.950078581763, 244.14664702523592],
        [2464.699519151286, 244.14664702523592],
        [2460.548352806457, 247.09263604414676],
        [2466.708148027816, 247.7621790029901],
        [2470.055862822033, 252.1811625313564],
        [2472.064491698563, 260.34958662924555],
        [2475.144389309243, 256.466237467954],
        [2479.027738470534, 257.6714147938721],
        [2478.759921286997, 252.85070549019977],
        [2475.144389309243, 248.43172196183352],
        [2468.7167769043463, 245.351824351154],
        [2468.0472339455027, 240.9328408227877],
        [2472.600126065638, 236.11213151911542],
        [2476.48347522693, 239.32593772156363],
        [2482.107636081214, 239.4598463133323],
        [2482.2415446729824, 242.2719267404745],
        [2483.580630590669, 246.55700167707207],
        [2488.133522710804, 246.15527590176603],
        [2491.0795117297153, 249.36908210421424],
        [2493.088140606245, 249.77080787952025],
        [2495.498495258081, 247.09263604414676],
        [2495.63240384985, 242.94146969931785],
        [2496.5697639922305, 240.79893223101905],
        [2501.524381887672, 243.61101265816123],
        [2502.997376397127, 232.6305081331299],
        [2509.960623169098, 233.30005109197327],
        [2511.3850117304055, 234.86433862353286],
        [2518.341170875014, 234.74440484517754],
        [2524.09799223607, 233.6650008399797],
        [2526.9764029165976, 238.4623519741923],
        [2531.294018937389, 240.62115998458802],
        [2535.131899844759, 240.62115998458802],
        [2545.925939896737, 243.25970310840498],
        [2550.003688360818, 248.77665691274944],
        [2553.841569268188, 248.77665691274944],
        [2554.0814368248984, 246.1381137889325],
        [2560.7977284127965, 238.10255063912638],
        [2563.7960728716794, 236.6633452988626],
        [2565.7150133253645, 239.90155731445608],
        [2567.7538875574046, 237.02314663392852],
        [2572.071503578196, 239.66168975774548],
        [2577.5884573825406, 240.38129242787736],
        [2573.990444031881, 233.06533194820312],
        [2571.71170224313, 232.9453981698478],
        [2567.034284887273, 229.587252375899],
        [2565.235278211943, 226.22910658195013],
        [2565.235278211943, 226.22910658195013],
        [2563.076470201547, 225.74937146852886],
        [2559.3585230725325, 229.587252375899],
        [2556.000377278584, 229.94705371096492],
        [2554.8010394950306, 228.38791459234582],
        [2556.000377278584, 225.62943769017357],
        [2552.0425625928583, 222.51115945293537],
        [2555.2807746084522, 220.83208655596096],
        [2561.757198639639, 220.95202033431624],
        [2566.434615995496, 218.07360965378868],
        [2568.593424005892, 218.55334476720995],
        [2573.270841361749, 216.51447053516958],
        [2578.1881262743173, 218.79321232392059],
        [2577.108722269119, 221.67162300444815],
        [2585.2642191972805, 221.19188789102688],
        [2588.2625636561634, 218.07360965378868],
        [2589.821702774783, 217.95367587543336],
        [2587.183159650966, 221.3118216693822],
        [2591.2609081150463, 221.3118216693822],
        [2593.779517460508, 217.5938745403674],
        [2597.617398367878, 217.95367587543336],
        [2601.695146831959, 218.67327854556527],
        [2596.418060584325, 214.4755963031292],
        [2588.382497434519, 212.6765896277995],
        [2594.3791863522847, 210.87758295246977],
        [2593.659583682153, 205.72043048319117],
        [2593.659583682153, 205.72043048319117],
        [2590.66123922327, 206.6799007100337],
        [2586.5834907591893, 209.55831139056127],
        [2581.6662058466213, 209.6782451689166],
        [2576.149252042277, 207.51943715852093],
        [2573.3907751401043, 209.31844383385064],
        [2569.9126955678003, 210.27791406069315],
        [2570.3924306812214, 211.83705317931228],
        [2563.316337758258, 211.9569869576676],
        [2557.679450175558, 213.87592741135265],
        [2551.0830923660155, 215.914801643393],
        [2545.3262710049607, 216.6344043135249],
        [2544.726602113184, 219.15301365898654],
        [2538.969780752129, 219.87261632911842],
        [2536.9309065200887, 223.35069590142257],
        [2530.4544824889017, 224.07029857155445],
        [2524.217926014425, 224.31016612826508],
        [2513.663753519157, 222.8709607880013],
        [2512.3444819572487, 222.1513581178694],
        [2511.0252103953403, 219.7526825507631],
        [2511.0252103953403, 219.7526825507631],
        [2508.8664023849446, 220.23241766418437],
        [2510.9052766169852, 217.71380831872276],
        [2511.0252103953403, 214.95533141655048],
        [2514.983025081066, 213.87592741135265],
        [2517.5016344265273, 208.35897360700812],
        [2521.8192504473186, 209.19851005549535],
        [2526.1368664681104, 206.5599669316784],
        [2529.2551447053484, 207.99917227194217],
        [2535.131899844759, 205.72043048319117],
        [2536.9309065200887, 208.1191060502975],
        [2545.2063372266052, 209.55831139056127],
        [2541.2485225408795, 205.72043048319117],
        [2536.331237628312, 200.6832117922679],
        [2533.8126282828503, 200.323410457202],
        [2532.0136216075207, 202.36228468924233],
        [2528.6554758135717, 204.52109269963802],
        [2526.7365353598866, 202.7220860243083],
        [2519.3006411018573, 206.08023181825715],
        [2516.542164199685, 203.4416886944402],
        [2514.623223746, 202.8420198026636],
        [2515.222892637776, 207.15963582345495],
        [2510.9052766169852, 207.03970204509966],
        [2510.9052766169852, 207.03970204509966],
        [2511.7448130654725, 211.2373842875357],
        [2506.9474619312596, 213.99586118970797],
        [2505.7481241477067, 215.67493408668236],
        [2502.2700445754026, 216.27460297845897],
        [2499.51156767323, 213.75599363299733],
        [2497.4726934411897, 212.43672207108887],
        [2495.793620544215, 209.19851005549535],
        [2503.10958102389, 206.32009937496775],
        [2506.587660596194, 203.68155625115082],
        [2504.5487863641533, 202.36228468924233],
        [2505.8680579260617, 201.16294690568918],
        [2506.2278592611274, 197.9247348900957],
        [2505.5082565909956, 195.6459931013447],
        [2509.1062699416557, 196.24566199312125],
        [2512.224548178893, 195.6459931013447],
        [2511.7448130654725, 192.52771486410649],
        [2516.66209797804, 190.24897307535548],
        [2517.1418330914616, 188.33003262167043],
        [2512.224548178893, 187.37056239482789],
        [2507.9069321581023, 187.37056239482789],
        [2506.707594374549, 189.6493041835789],
        [2503.9491174723767, 187.2506286164726],
        [2498.5520974463875, 188.0901650649598],
        [2494.9540840957284, 190.2489730753555],
        [2492.1956071935556, 190.36890685371083],
        [2491.5959383017794, 185.81142327620884],
        [2488.3577262861854, 188.21009884331514],
        [2484.040110265394, 191.32837708055334],
        [2479.6025604662477, 194.0868539827256],
        [2476.4842822290093, 194.68652287450217],
        [2475.7646795588776, 196.96526466325318],
        [2471.2071959813757, 197.68486733338509],
        [2468.8085204142694, 199.84367534378075],
        [2466.6497124038738, 201.40281446239985],
        [2465.4503746203204, 198.40447000351696],
        [2463.771301723346, 196.96526466325318],
        [2463.8912355017014, 195.04632420956813],
        [2465.090573285255, 192.5277148641065],
        [2463.2915666099248, 192.76758242081712],
        [2461.0128248211736, 194.8064566528575],
        [2460.772957264463, 198.40447000351696],
        [2462.212162604727, 199.60380778707014],
        [2461.0128248211736, 203.68155625115085],
        [2456.815142578738, 202.4822184675977],
        [2452.9772616713676, 204.40115892128276],
        [2447.82010920209, 206.91976826674434],
        [2444.4619634081414, 206.91976826674434],
        [2439.1848771605078, 210.75764917411448],
        [2432.9483206860314, 212.07692073602294],
        [2427.551300660042, 212.4367220710889],
        [2424.433022422804, 211.717119400957],
        [2420.8350090721447, 213.75599363299736],
        [2419.275869953525, 214.1157949680633],
        [2416.2775254946423, 212.79652340615482],
        [2416.1575917162872, 216.5144705351696],
        [2408.0020947881258, 216.75433809188024],
        [2403.204743653913, 217.11413942694617],
        [2400.3263329733854, 219.99255010747376],
        [2397.927657406279, 216.03473542174837],
        [2394.449577833975, 216.03473542174837],
        [2395.2891142824624, 210.1579802823379],
        [2396.1286507309496, 208.35897360700815],
        [2400.4462667517405, 210.39784783904852],
        [2398.527326298056, 207.63937093687625],
        [2401.2858032002277, 207.63937093687625],
        [2405.9632205560856, 211.1174505091804],
        [2408.7216974582575, 211.59718562260167],
        [2406.4429556695063, 207.75930471523156],
        [2402.365207205426, 204.76096025634868],
        [2401.525670756939, 201.52274824075516],
        [2403.0848098755578, 200.92307934897858],
        [2407.2824921179936, 201.52274824075516],
        [2407.6422934530597, 199.84367534378075],
        [2406.3230218911513, 197.80480111174037],
        [2401.765538313649, 195.5260593229894],
        [2399.96653163832, 198.52440378187228],
        [2397.4479222928576, 200.8031455706233],
        [2395.2891142824624, 205.00082781305932],
        [2390.8515644833155, 204.880894034704],
        [2387.733286246077, 204.76096025634868],
        [2384.135272895418, 203.56162247279553],
        [2379.5777893179156, 203.80149002950614],
        [2379.21798798285, 206.32009937496778],
        [2376.3395773023226, 207.15963582345498],
        [2376.3395773023226, 208.95864249878474],
        [2373.58110040015, 209.19851005549535],
        [2370.462822162912, 207.9991722719422],
        [2369.623285714425, 210.63771539575916],
        [2366.7448750338967, 209.19851005549535],
        [2366.7448750338967, 209.19851005549535],
        [2364.825934580212, 208.47890738536347],
        [2363.746530575014, 210.75764917411448],
        [2362.3073252347504, 211.59718562260167],
        [2359.788715889289, 208.8387087204294],
        [2355.710967425208, 209.19851005549535],
        [2356.910305208761, 212.07692073602294],
        [2355.1112985334316, 213.3961922979314],
        [2348.155139388823, 213.75599363299736],
        [2347.0757353836257, 215.19519897326114],
        [2348.7548082806, 216.99420564859088],
        [2344.4371922598084, 216.87427187023556],
        [2344.3172584814533, 218.43341098885466],
        [2339.879708682306, 218.0736096537887],
        [2340.479377574083, 214.9553314165505],
        [2337.9607682286214, 212.91645718451016],
        [2337.720900671911, 212.3167882927336],
        [2336.2816953316474, 215.67493408668244],
        [2334.002953542896, 212.3167882927336],
        [2331.3644104190794, 211.59718562260173],
        [2332.323880645922, 214.5955300814846],
        [2331.3644104190794, 215.4350665299718],
        [2330.165072635526, 214.5955300814846],
        [2329.2056024086837, 211.3573180658911],
        [2327.406595733354, 211.3573180658911],
        [2327.406595733354, 215.1951989732612],
        [2325.127853944603, 215.07526519490588],
        [2322.2494432640756, 216.27460297845903],
        [2320.930171702167, 218.79321232392064],
        [2317.572025908218, 216.8742718702356],
        [2316.852423238086, 220.832086555961],
        [2314.5736814493353, 223.35069590142265],
        [2311.5753369904523, 222.9908945663567],
        [2309.6563965367673, 219.39288121569723],
        [2306.178316964463, 218.913146102276],
        [2306.178316964463, 217.7138083187228],
        [2310.1361316501884, 217.23407320530157],
        [2315.053416562757, 215.1951989732612],
        [2316.732489459731, 211.71711940095705],
        [2312.7746747740057, 211.71711940095705],
        [2308.337124974859, 212.79652340615488],
        [2304.1394427324226, 214.71546385983993],
        [2306.058383186108, 211.2373842875358],
        [2304.0195089540675, 207.87923849358694],
        [2304.0195089540675, 206.0802318182572],
        [2300.5414293817635, 206.67990071003376],
        [2298.1427538146568, 207.87923849358694],
        [2295.2643431341294, 205.72043048319125],
        [2294.1849391289315, 205.8403642615465],
        [2292.0261311185363, 207.39950338016558],
        [2290.8267933349825, 208.1191060502975],
        [2284.8301044172167, 207.39950338016558],
        [2281.831759958334, 210.15798028233786],
        [2278.113812829319, 207.03970204509966],
        [2273.9161305868834, 207.39950338016558],
        [2268.519110560894, 207.99917227194217],
        [2265.160964766945, 205.1207615914146],
        [2264.9210972102346, 201.0430131273339],
        [2262.1626203080627, 198.52440378187225],
        [2263.961626983392, 192.76758242081712],
        [2259.6440109626005, 194.68652287450217],
        [2257.2453353954943, 190.60877441042146],
        [2255.6861962768753, 189.5293704052236],
        [2254.0071233799013, 192.28784730739588],
        [2249.329706024044, 193.84698642601495],
        [2245.4918251166737, 195.88586065805532],
        [2244.412421111476, 193.3672513125937],
        [2240.694473982461, 193.3672513125937],
        [2240.8144077608163, 196.72539710654254],
        [2237.9359970802884, 195.04632420956813],
        [2232.1791757192336, 198.6443375602276],
        [2231.9393081625226, 201.40281446239985],
        [2227.3818245850207, 201.40281446239985],
        [2223.3040761209404, 203.56162247279553],
        [2218.5067249867275, 204.76096025634868],
        [2213.2296387390934, 199.96360912213606],
        [2209.6316253884343, 202.12241713253175],
        [2208.1924200481703, 198.6443375602276],
        [2203.0352675788918, 199.3639402303595],
        [2199.437254228232, 196.96526466325318],
        [2194.999704429086, 200.92307934897858],
        [2184.805333268884, 202.24235091088707],
        [2184.565465712173, 204.52109269963805],
        [2188.523280397899, 209.5583113905613],
        [2188.523280397899, 209.5583113905613],
        [2188.523280397899, 209.19851005549535],
        [2188.523280397899, 209.19851005549535],
        [2179.2883794645395, 203.68155625115085],
        [2174.4910283303266, 199.12407267364887],
        [2173.5315581034843, 195.88586065805532],
        [2178.3289092376967, 195.16625798792344],
        [2177.249505232499, 193.72705264765966],
        [2171.612617649799, 192.76758242081712],
        [2167.5348691857184, 190.48884063206611],
        [2162.7375180515055, 188.5699001783811],
        [2163.4571207216377, 193.12738375588307],
        [2162.1378491597293, 196.12572821476596],
        [2157.2205642471613, 194.56658909614686],
        [2152.783014448015, 197.56493355502974],
        [2147.026193086959, 199.3639402303595],
        [2144.0278486280763, 202.602152245953],
        [2146.426524195183, 205.84036426154654],
        [2148.9451335406447, 208.47890738536347],
        [2153.982352231568, 208.59884116371876],
        [2152.543146891304, 211.717119400957],
        [2151.5836766644616, 214.8353976381952],
        [2146.186656638472, 215.19519897326117],
        [2143.548113514655, 217.59387454036752],
        [2139.3504312722193, 219.51281499405258],
        [2138.6308286020876, 221.191887891027],
        [2142.228841952747, 221.55168922609295],
        [2138.9906299371532, 225.14970257675242],
        [2140.429835277417, 226.94870925208215],
        [2138.8706961587977, 228.9875834841225],
        [2138.8706961587977, 232.58559683478197],
        [2135.512550364849, 232.34572927807133],
        [2136.112219256626, 234.86433862353297],
        [2136.591954370047, 238.94208708761371],
        [2136.591954370047, 238.94208708761371],
        [2136.591954370047, 238.94208708761371],
        [2136.591954370047, 238.94208708761371],
        [2136.591954370047, 238.94208708761371],
        [2136.591954370047, 238.94208708761371],
        [2136.591954370047, 238.94208708761371],
    ]

    contour_polygons = get_intersected_points(points1, points2, False, filename="test")
    print(contour_polygons)

    # plot_poinsts_list(contour_polygons + [reorder_points(points1)] + [reorder_points(points2)], 'test.png')
    plot_poinsts_list([points1] + [points2], "gt.png")
    plot_poinsts_list(contour_polygons + [points1], "pred.png")
